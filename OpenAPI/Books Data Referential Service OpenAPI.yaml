openapi: 3.0.3
info:
  title: DemoEditor books referential API
  description: Contract for books exposition at DemoEditor company
  contact:
    email: api@demoeditor.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://demoeditor.org/api
tags:
  - name: books
    description: Manipulating books, existing and in project
  - name: params
    description: Setting parameters for the books data referential
paths:
  /books:
    post:
      tags:
        - books
      summary: Creates a book in the referential
      description: This operation allows the creation of a new book in the data referential. 
      operationId: addBook
      requestBody:
        description: Description of a book, with at least the mandatory attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Successful creation
        '403':
          description: Is returned if the operation is forbidden
        '422':
          description: Is returned if the content proposed for creation is invalid
  /books/{id}:
    get:
      tags:
        - books
      summary: Retrieves a book by its identifier
      description: This operation returns the attributes of a book in the referential based on its identifier. This can be the internal identifier or the ISBN number if it exists.
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: internal id or ISBN of the book that is requested from the API
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
        '400':
          description: Is returned if an invalid id is provided
        '403':
          description: Is returned if reading operation on the book is forbidden
        '404':
          description: Is returned when the id provided is valid but no books exist with this identifier or ISBN number
    delete:
      tags:
        - books
      summary: Deletes a book from the referential
      description: Rather than actually deleting the book from the data referential, this operation actually makes it inactive and invisible. The data is still there, but can only be retrieved by high-privilege or technical administrators. This is done in order to make possible full traceability.
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: Identifier (internal or ISBN) of the book to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Is returned if the book was successfully deactivated
        '403':
          description: Is returned if deletion operation on the book is forbidden
        '404':
          description: Is returned when no book was found with this identifier
  /params/statuses:
    put:
      tags:
        - params
      summary: Defines the possible values of status for the books
      description: |-
        This operation allows to customize the possible status key / value pairs. By default, the statuses will be the following:
        - 1 / Project : when the book is only a project
        - 2 / Draft : when the author has been chosen and a structure is written
        - 3 / Writing : when the author is writing the book
        - 4 / Review : during the review of the book
        - 5 / Validated : book reviewed, ready for printing and selling
        - 6 / Archived : no further edition is planned but sales go on
        - 7 / Retired : no further sales, the book is out of the circuit
      operationId: setStatuses
      requestBody:
        description: Possible statuses for a book, as a list of key / value pairs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statuses'
        required: true
      responses:
        '200':
          description: Successful modification of the status codes
        '403':
          description: Is returned if the operation is forbidden
        '422':
          description: Is returned if the content proposed for creation is invalid
components:
  schemas:
    Book:
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
        isbn:
          type: string
          description: Official ISBN number of the book, once obtained
          example: 978-2409002205
        title:
          type: string
        numberOfPages:
          type: integer
          format: int16
        publishedAt:
          type: string
          format: date
        editing:
          type: object
          properties:
            numberOfChapters:
              type: integer
              format: int16
            status:
              $ref: '#/components/schemas/Status'
            mainAuthor:
              $ref: '#/components/schemas/AuthorLink'
        production:
          type: object
          properties:
            typeOfPaper:
              type: string
            assemblyMode:
              type: string
              description: mechanical assemblying mode used to bind pages of the book in paper format
              enum:
                - bound
                - glued
            coverType:
              type: string
              enum:
                - soft
                - hard
        sales:
          type: object
          properties:
            price:
              type: number
              format: currency
            weightInGrams:
              type: integer
              format: int16
            salesConditions:
              type: string
    Status:
      type: object
      properties:
        id:
          type: integer
          format: int16
          example: 1
        name:
          type: string
          example: Project
    Statuses:
      type: array
      items:
        type: object
        properties:
          code:
            type: integer
            format: int16
          title:
            type: string
    Link:
      type: object
      properties:
        href:
          type: string
          format: url
        rel:
          type: string
        title:
          type: string
    AuthorLink:
      allOf:
        - $ref: '#/components/schemas/Link'
        - type: object
          properties:
            authorId:
              type: string
