@page "/authordiff/{id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "editor")]
@inject IHttpClientFactory HttpFactory

<PageTitle>Author (autopatch)</PageTitle>
 
@if (currentAuthor == null || authorContext == null)
{
    <p><em>Loading...</em></p>
}
else if (id == null)
{
    <p>You should not reach this page without specifying an author identifier</p>
}
else
{
    <div>
        <EditForm EditContext="authorContext" class="row g-3">
            <div class="col-md-6">
                <label for="firstName" class="form-label">First name</label>
                <InputText class="form-control" id="firstName" @bind-Value="currentAuthor.FirstName" />
            </div>
            <div class="col-md-6">
                <label for="lastName" class="form-label">Last name</label>
                <InputText class="form-control" id="lastName" @bind-Value="currentAuthor.LastName" />
            </div>
            <div class="col-12">
                <label for="email" class="form-label">Email address</label>
                <InputText type="email" class="form-control" id="email" placeholder=test@company.com @bind-Value="currentAuthor.UserEmailAddress" />
            </div>
            @if (currentAuthor.SortedPhones.Count() > 0)
            {
                <div class="col-md-6">
                    <label for="firstPhone" class="form-label">@currentAuthor.SortedPhones[0].IANAType phone</label>
                    <InputText class="form-control" id="firstPhone" @bind-Value="currentAuthor.FirstPhoneNumber" />
                </div>
            }
            @if (currentAuthor.SortedPhones.Count() > 1)
            {
                <div class="col-md-6">
                    <label for="secondPhone" class="form-label">@currentAuthor.SortedPhones[1].IANAType phone</label>
                    <InputText class="form-control" id="secondPhone" @bind-Value="currentAuthor.SecondPhoneNumber" />
                </div>
            }
            <div class="col-3">
                <label for="streetNumber" class="form-label">Number</label>
                <InputText class="form-control" id="streetNumber" placeholder="12" @bind-Value="currentAuthor.MainAddress.StreetNumber" />
            </div>
            <div class="col-6">
                <label for="streetName" class="form-label">Street</label>
                <InputText class="form-control" id="streetName" placeholder="Main Street" @bind-Value="currentAuthor.MainAddress.StreetName" />
            </div>
            <div class="col-3">
                <label for="zip" class="form-label">Zip code</label>
                <InputText class="form-control" id="zip" @bind-Value="currentAuthor.MainAddress.ZipCode" />
            </div>
            <div class="col-4">
                <label for="city" class="form-label">City</label>
                <InputText class="form-control" id="city" @bind-Value="currentAuthor.MainAddress.CityName" />
            </div>
            <div class="col-4">
                <label for="inputState" class="form-label">Country</label>
                <InputSelect id="inputState" class="form-select" @bind-Value="currentAuthor.MainAddress.Country.ISOCode">
                    <option selected>Choose...</option>
                    <option value="FRA">France</option>
                    <option value="IND">India</option>
                    <option value="USA">USA</option>
                </InputSelect>
            </div>
            <div class="col-4">
                <div class="form-check">
                    <label class="form-check-label" for="isBlocked">
                        Block author (prevents access to their books, in case of proven misconduct)
                    </label>
                    <InputCheckbox class="form-check-input" id="isBlocked" @bind-Value="currentAuthor.IsBlocked" />
                </div>
            </div>
            <h2>No need for a save button; every atomic change is sent to the server</h2>
        </EditForm>
    </div>
}
 
@code {
    [Parameter]
    public string? id { get; set; }
 
    private DTO.Author currentAuthor = new DTO.Author();
 
    private EditContext authorContext;
 
    private HttpClient client = null;

    protected override async Task OnInitializedAsync()
    {
        client = HttpFactory.CreateClient("AuthorsAPI");

        if (id == null) return;
        currentAuthor = await client.GetFromJsonAsync<DTO.Author>("http://authors:82/Authors/" + id);
        authorContext = new EditContext(currentAuthor);
        authorContext.OnFieldChanged += Modification;
    }
 
    private async void Modification(object sender, FieldChangedEventArgs e)
    {
        string path = e.FieldIdentifier.FieldName;
        switch (e.FieldIdentifier.FieldName)
        {
            case "FirstPhoneNumber":
                path = "/Contacts/Phones/0/Number";
                break;
            case "SecondPhoneNumber":
                path = "/Contacts/Phones/1/Number";
                break;
            case "StreetNumber":
            case "StreetName":
            case "ZipCode":
            case "CityName":
                path = "/Contacts/Addresses/0/" + path;
                break;
            case "ISOCode":
                path = "/Contacts/Addresses/0/Country/" + path;
                break;
            default:
                path = "/" + path.Substring(0, 1).ToLower() + path.Substring(1);
                break;
        }
            
                @* "addressType": "urn:org:demoeditor:addressType:living",
                "beginDate": "1994-08-15T23:00:00",
                "endDate": "1995-06-15T09:00:00",
                "address": {
                    "streetNumber": "12",
                    "streetName": "Main Street",
                    "zipCode": "PA 19004-3104",
                    "cityName": "Philadelphia"
                }                 *@


        string jsonPatch = "[{\"op\": \"replace\", \"path\": \"" + path + "\", \"value\": \"" + e.FieldIdentifier.Model.GetType().GetProperty(e.FieldIdentifier.FieldName)?.GetValue(e.FieldIdentifier.Model) + "\"}]";
        if (e.FieldIdentifier.FieldName == "IsBlocked")
            jsonPatch = "[{\"op\": \"replace\", \"path\": \"restriction\", \"value\": \"" + currentAuthor.Restriction + "\"}]";
        var content = new StringContent(jsonPatch, System.Text.Encoding.UTF8, "application/json");
        await client.PatchAsync("http://authors:82/Authors/" + currentAuthor.EntityId, content);
    }    
}
