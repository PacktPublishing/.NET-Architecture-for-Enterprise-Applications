@page "/author/"
@page "/author/{id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "editor")]
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Navigator

<PageTitle>Author</PageTitle>

<div>
    <EditForm OnSubmit="Save" Model="CurrentAuthor" class="row g-3">
        <div class="col-md-6">
            <label for="firstName" class="form-label">First name</label>
            <InputText class="form-control" id="firstName" @bind-Value="CurrentAuthor.FirstName" />
        </div>
        <div class="col-md-6">
            <label for="lastName" class="form-label">Last name</label>
            <InputText class="form-control" id="lastName" @bind-Value="CurrentAuthor.LastName" />
        </div>
        <div class="col-12">
            <label for="email" class="form-label">Email address</label>
            <InputText type="email" class="form-control" id="email" placeholder=test@company.com @bind-Value="CurrentAuthor.UserEmailAddress" />
        </div>
        @* <div class="col-md-6">
            <label for="homePhone" class="form-label">Home phone</label>
            <InputText class="form-control" id="homePhone" @bind-Value="CurrentAuthor.HomePhone" />
        </div>
        <div class="col-md-6">
            <label for="mobilePhone" class="form-label">Cell phone</label>
            <InputText class="form-control" id="mobilePhone" @bind-Value="CurrentAuthor.MobilePhone" />
        </div> *@
        @if (CurrentAuthor.SortedPhones.Count() > 0)
        {
            <div class="col-md-6">
                <label for="firstPhone" class="form-label">@CurrentAuthor.SortedPhones[0].IANAType phone</label>
                <InputText class="form-control" id="firstPhone" @bind-Value="CurrentAuthor.SortedPhones[0].Number" />
            </div>
        }
        @if (CurrentAuthor.SortedPhones.Count() > 1)
        {
            <div class="col-md-6">
                <label for="secondPhone" class="form-label">@CurrentAuthor.SortedPhones[1].IANAType phone</label>
                <InputText class="form-control" id="secondPhone" @bind-Value="CurrentAuthor.SortedPhones[1].Number" />
            </div>
        }
        <div class="col-3">
            <label for="streetNumber" class="form-label">Number</label>
            <InputText class="form-control" id="streetNumber" placeholder="12" @bind-Value="CurrentAuthor.MainAddress.StreetNumber" />
        </div>
        <div class="col-6">
            <label for="streetName" class="form-label">Street</label>
            <InputText class="form-control" id="streetName" placeholder="Main Street" @bind-Value="CurrentAuthor.MainAddress.StreetName" />
        </div>
        <div class="col-3">
            <label for="zip" class="form-label">Zip code</label>
            <InputText class="form-control" id="zip" @bind-Value="CurrentAuthor.MainAddress.ZipCode" />
        </div>
        <div class="col-4">
            <label for="city" class="form-label">City</label>
            <InputText class="form-control" id="city" @bind-Value="CurrentAuthor.MainAddress.CityName" />
        </div>
        <div class="col-4">
            <label for="inputState" class="form-label">Country</label>
            <InputSelect id="inputState" class="form-select" @bind-Value="CurrentAuthor.MainAddress.Country.ISOCode">
                <option selected>Choose...</option>
                <option value="FRA">France</option>
                <option value="IND">India</option>
                <option value="USA">USA</option>
            </InputSelect>
        </div>
        <div class="col-4">
            <div class="form-check">
                <label class="form-check-label" for="gridCheck">
                    Block author (prevents access to their books, in case of proven misconduct)
                </label>
                <InputCheckbox class="form-check-input" id="gridCheck" @bind-Value="CurrentAuthor.IsBlocked" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary btn-lg">Save</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public string? id { get; set; }

    private DTO.Author? CurrentAuthor = new DTO.Author();

    private HttpClient client = null;

    protected override async Task OnInitializedAsync()
    {
        client = HttpFactory.CreateClient("AuthorsAPI");

        if (id != null)
        {
            CurrentAuthor = await client.GetFromJsonAsync<DTO.Author>(@"http://authors:82/Authors/" + id);
        }
    }

    protected async void Save()
    {
        if (id == null)
        {
            CurrentAuthor.EntityId = Guid.NewGuid().ToString("N");
        }
        if (string.IsNullOrEmpty(CurrentAuthor.MainAddress.Country.ISOCode))
        {
            CurrentAuthor.MainAddress.Country = null;
        }
        else
        {
            CurrentAuthor.MainAddress.Country.Href = "/api/authors/params/countryCodes/" + CurrentAuthor.MainAddress.Country.ISOCode;
            CurrentAuthor.MainAddress.Country.Rel = "addressCountry";
            switch (CurrentAuthor.MainAddress.Country.ISOCode)
            {
                case "FRA": CurrentAuthor.MainAddress.Country.Title = "France"; break;
                case "IND": CurrentAuthor.MainAddress.Country.Title = "India"; break;
                case "USA": CurrentAuthor.MainAddress.Country.Title = "USA"; break;
            }
        }
        await client.PostAsJsonAsync<DTO.Author>(@"http://authors:82/Authors/", CurrentAuthor);
        if (id == null)
        {
            Navigator.NavigateTo("/authors");
        }
    }
}
