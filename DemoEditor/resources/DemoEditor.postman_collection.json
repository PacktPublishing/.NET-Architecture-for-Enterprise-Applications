{
	"info": {
		"_postman_id": "ecd43598-6f64-4dda-9a6e-d63354a572ba",
		"name": "DemoEditor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "389879"
	},
	"item": [
		{
			"name": "Books API",
			"item": [
				{
					"name": "Create book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\": \"0024\",\r\n    \"isbn\": \"978-2409002206\",\r\n    \"title\": \"Docker, 4th edition\",\r\n    \"numberOfPages\": 812,\r\n    \"publishDate\": \"2019-09-01\",\r\n    \"editing\": {\r\n        \"numberOfChapters\": 15,\r\n        \"status\": { \"value\": \"available\" },\r\n        \"mainAuthor\": {\r\n            \"rel\": \"dc:creator\",\r\n            \"href\": \"http://authors:82/Authors/jpgou\",\r\n            \"title\": \"JP Gouigoux\",\r\n            \"userEmailAddress\": \"jp.gouigoux@free.fr\"\r\n        }\r\n    },\r\n    \"sales\": {\r\n        \"price\": {\r\n            \"value\": 54.30,\r\n            \"monetaryUnit\": \"EUR\"\r\n        },\r\n        \"weightInGrams\": 1245\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BooksURL}}/Books/",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Title correctly modified\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql('Performance in .NET, Second Edition');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"path\": \"/title\",\r\n    \"op\": \"replace\",\r\n    \"value\": \"Performance in .NET, Second Edition\"\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify book author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Title correctly modified\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql('Performance in .NET, Second Edition');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"path\": \"/editing\",\r\n    \"op\": \"add\",\r\n    \"value\": {\r\n        \"mainAuthor\": {\r\n            \"href\": \"http://authors:82/Authors/jpgou\"\r\n        }\r\n    }\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book has the right entity identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.entityId).to.eql('0024');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book has the right entity identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.entityId).to.eql('0024');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/Status",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"Status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"1\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/$count",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"$count"
							]
						}
					},
					"response": []
				},
				{
					"name": "List books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No empty array\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql(\"[]\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read archived book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book has the right entity identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.entityId).to.eql('0024');\r",
									"});\r",
									"pm.test(\"Book should be archived\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.editing.status.value).to.eql('archived');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"0\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/$count",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"$count"
							]
						}
					},
					"response": []
				},
				{
					"name": "List books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No empty array\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Recover book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"path\": \"/editing/status/value\",\r\n    \"op\": \"replace\",\r\n    \"value\": \"available\"\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read recovered book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book has the right entity identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.entityId).to.eql('0024');\r",
									"});\r",
									"pm.test(\"Book should be archived\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.editing.status.value).to.eql('available');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"1\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/$count",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"$count"
							]
						}
					},
					"response": []
				},
				{
					"name": "List books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No empty array\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql(\"[]\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete book permanently",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024?fullDeleteIncludingHistory=true",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							],
							"query": [
								{
									"key": "fullDeleteIncludingHistory",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read deleted book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"0\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/$count",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"$count"
							]
						}
					},
					"response": []
				},
				{
					"name": "List books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No empty array\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books?$orderby=numberOfPages desc",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books"
							],
							"query": [
								{
									"key": "$orderby",
									"value": "numberOfPages desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Paginate books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books?$top=2",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books"
							],
							"query": [
								{
									"key": "$top",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read book state",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/0024?providedValueDate=2024-03-06T22:00:00",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"0024"
							],
							"query": [
								{
									"key": "providedValueDate",
									"value": "2024-03-06T22:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all books permanently",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/?confirmFullDeleteOfAllBooksIncludingHistory=true",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								""
							],
							"query": [
								{
									"key": "confirmFullDeleteOfAllBooksIncludingHistory",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import catalog",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BooksURL}}/Books/Import?localFileAddress=/tmp/data/DemoEditor-BooksCatalog.xlsx",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"Books",
								"Import"
							],
							"query": [
								{
									"key": "localFileAddress",
									"value": "/tmp/data/DemoEditor-BooksCatalog.xlsx"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Receive author cache",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EntityId\": \"jpgou\",\r\n    \"FirstName\": \"Jean-Philippe\",\r\n    \"LastName\": \"Gouigoux\",\r\n    \"UserEmailAddress\": \"jp.gouigoux@frenchy.fr\",\r\n    \"Restriction\": \"none\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BooksURL}}/AuthorsCache",
							"host": [
								"{{BooksURL}}"
							],
							"path": [
								"AuthorsCache"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authors API",
			"item": [
				{
					"name": "Create author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\": \"jpgou\",\r\n    \"firstName\": \"Jean-Philippe\",\r\n    \"lastName\": \"Gouigoux\",\r\n    \"userEmailAddress\": \"jp.gouigoux@free.fr\",\r\n    \"restriction\": \"none\",\r\n    \"contacts\": {\r\n        \"addresses\": [\r\n            {\r\n                \"streetNumber\": \"11\",\r\n                \"streetName\": \"Vince Street\",\r\n                \"cityName\": \"Paris\",\r\n                \"zipCode\": \"75000\",\r\n                \"country\": {\r\n                    \"rel\": \"addressCountry\",\r\n                    \"href\": \"/api/authors/params/countryCodes/FRA\",\r\n                    \"title\": \"France\",\r\n                    \"isoCode\": \"FRA\"\r\n                }\r\n            }\r\n        ],\r\n        \"phones\": [\r\n            {\r\n                \"ianaType\": \"home\",\r\n                \"number\": \"+33297979797\"\r\n            },\r\n            {\r\n                \"ianaType\": \"cell\",\r\n                \"number\": \"+33600000000\"\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AuthorsURL}}/Authors/",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\": \"46c94dca02314491afc1ecd8fa03c39e\",\r\n    \"firstName\": \"Gaston\",\r\n    \"lastName\": \"Lagaffe\",\r\n    \"userEmailAddress\": \"gaston@dargaud.com\",\r\n    \"restriction\": \"none\",\r\n    \"contacts\": {\r\n        \"addresses\": [\r\n            {\r\n                \"streetNumber\": null,\r\n                \"streetName\": null,\r\n                \"cityName\": null,\r\n                \"zipCode\": null,\r\n                \"country\": {\r\n                    \"rel\": \"addressCountry\",\r\n                    \"href\": \"/api/authors/params/countryCodes/FRA\",\r\n                    \"title\": \"France\",\r\n                    \"isoCode\": \"FRA\"\r\n                }\r\n            }\r\n        ],\r\n        \"phones\": null\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AuthorsURL}}/Authors/",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorsURL}}/Authors/jpgou",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors",
								"jpgou"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorsURL}}/Authors",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Book created with the right ISBN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isbn).to.eql('978-2409002205');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorsURL}}/Authors?$filter=lastName eq 'Gouigoux' and firstName eq 'Jean-Philippe'",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors"
							],
							"query": [
								{
									"key": "$filter",
									"value": "lastName eq 'Gouigoux' and firstName eq 'Jean-Philippe'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Title correctly modified\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql('Performance in .NET, Second Edition');\r",
									"});\r",
									"pm.test(\"Response time is within limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"path\": \"/userEmailAddress\",\r\n    \"op\": \"replace\",\r\n    \"value\": \"jp.gouigoux@gmail.com\"\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AuthorsURL}}/Authors/jpgou",
							"host": [
								"{{AuthorsURL}}"
							],
							"path": [
								"Authors",
								"jpgou"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MiddleOffice",
			"item": [
				{
					"name": "Declare template",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": [{\"lang\": \"en-US\", \"value\": \"You have been proposed to write a new book for DemoEditor\"}],\r\n    \"fields\": [\r\n        {\r\n            \"id\": \"BookId\",\r\n            \"name\": [{\"lang\": \"en-US\", \"value\": \"Project book identifier\"}],\r\n            \"inputType\": \"string\",\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"id\": \"AuthorId\",\r\n            \"name\": [{\"lang\": \"en-US\", \"value\": \"Prospect author identifier\"}],\r\n            \"inputType\": \"string\",\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"id\": \"BookTitle\",\r\n            \"name\": [{\"lang\": \"en-US\", \"value\": \"Title of the proposed book\"}],\r\n            \"inputType\": \"string\"\r\n        },\r\n        {\r\n            \"id\": \"MaxResponseDate\",\r\n            \"name\": [{\"lang\": \"en-US\", \"value\": \"Deadline for response\"}],\r\n            \"inputType\": \"date\",\r\n            \"required\": false\r\n        }\r\n    ],\r\n    \"possibleDecisions\": [\r\n        {\r\n            \"id\": \"YES\",\r\n            \"title\": [{\"lang\": \"en-US\", \"value\": \"I accept\"}],\r\n            \"actions\" : [{\"href\": \"http://books:8080/Books/${BookId}/AuthorsAcceptingWritingProposal/${AuthorId}\", \"verb\": \"POST\"}]\r\n        },\r\n        {\r\n            \"id\": \"NO\",\r\n            \"title\": [{\"lang\": \"en-US\", \"value\": \"I decline\"}]\r\n        },\r\n        {\r\n            \"id\": \"CONTACT\",\r\n            \"title\": [{\"lang\": \"en-US\", \"value\": \"I would like to be contacted by an editor\"}],\r\n            \"actions\" : [{\"href\": \"http://authors:8080/Authors/${AuthorId}/RequestForContact\", \"verb\": \"POST\"}]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MiddleOfficeURL}}/templates/AuthorNewBookProposal",
							"host": [
								"{{MiddleOfficeURL}}"
							],
							"path": [
								"templates",
								"AuthorNewBookProposal"
							]
						}
					},
					"response": []
				},
				{
					"name": "List templates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{MiddleOfficeURL}}/templates",
							"host": [
								"{{MiddleOfficeURL}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"idRequest\", pm.response.json().entityId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"fieldId\": \"BookId\",\r\n        \"value\": \"00025\"\r\n    },\r\n    {\r\n        \"fieldId\": \"AuthorId\",\r\n        \"value\": \"jpgou\"\r\n    },\r\n    {\r\n        \"fieldId\": \"BookTitle\",\r\n        \"value\": \"Performance in .NET, Third Edition\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MiddleOfficeURL}}/templates/AuthorNewBookProposal/request",
							"host": [
								"{{MiddleOfficeURL}}"
							],
							"path": [
								"templates",
								"AuthorNewBookProposal",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read request",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"fieldId\": \"BookId\",\r\n        \"value\": \"00025\"\r\n    },\r\n    {\r\n        \"fieldId\": \"AuthorId\",\r\n        \"value\": \"jpgou\"\r\n    },\r\n    {\r\n        \"fieldId\": \"BookTitle\",\r\n        \"value\": \"Performance in .NET, Third Edition\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MiddleOfficeURL}}/request/{{idRequest}}",
							"host": [
								"{{MiddleOfficeURL}}"
							],
							"path": [
								"request",
								"{{idRequest}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "redirect_uri",
				"value": "http://books:8080/authentication/login-callback",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "http://iam:8080/realms/demoeditor/protocol/openid-connect/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "http://iam:8080/realms/demoeditor/protocol/openid-connect/auth",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "portal",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "tokenName",
				"value": "keycloak-token",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}