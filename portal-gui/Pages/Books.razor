@page "/books"
@attribute [Authorize(Roles = "editor")]
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

<PageTitle>Books</PageTitle>

<h1>Books (total number of @(TotalNumberOfBooks.HasValue ? TotalNumberOfBooks : "N/A"))</h1>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
    @foreach (var book in books)
    {
        <div class="row">
            <div class="col-xl">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@book.Title</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@book.ISBN (@book.EntityId)</h6>
                        <p class="card-text">Published @book.PublishDate?.ToString("MM/yyyy")</p>
                        <p class="card-text">@book.NumberOfPages pages / @book.Editing?.NumberOfChapters chapters</p>
                        <a href="/books/@book.Editing?.mainAuthor?.Id'" class="card-link">@book.Editing?.mainAuthor?.Title</a>
                    </div>
                </div>        
            </div>        
        </div>        
    }
    </div>

    <div class="row">
        <div class="col">
            <PaginationBar 
                CurrentPage="CurrentPage"
                TotalPages="TotalPages"
                TotalCount="(int)TotalNumberOfBooks"
                PageSize="PageSize"
                Spread="2"
                SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    private int? TotalNumberOfBooks = null;
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 5;

    private DTO.Book[]? books;

    protected override async Task OnInitializedAsync()
    {
        TotalNumberOfBooks = await Http.GetFromJsonAsync<int>(@"http://books/Books/$count");
        TotalPages = (int)Math.Ceiling((decimal)TotalNumberOfBooks / PageSize);

        books = await Http.GetFromJsonAsync<DTO.Book[]>(@"http://books/Books?$top=" + PageSize);
    }

    protected async Task SelectedPage(int page)
    {
        TotalNumberOfBooks = await Http.GetFromJsonAsync<int>(@"http://books/Books/$count");
        TotalPages = (int)Math.Ceiling((decimal)TotalNumberOfBooks / PageSize);

        CurrentPage = page;
        int top = PageSize;
        int skip = PageSize * (page - 1);
        books = await Http.GetFromJsonAsync<DTO.Book[]>(@"http://books/Books?$top=" + top + "&$skip=" + skip);

        InvokeAsync(StateHasChanged);
    }
}
