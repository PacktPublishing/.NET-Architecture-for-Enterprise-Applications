@page "/books"
@attribute [Authorize(Roles = "editor")]
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

<PageTitle>Books</PageTitle>

<h1>Books</h1>

<p>This component shows the list of books retrieved from the API</p>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Total number of books: @(TotalNumberOfBooks.HasValue ? TotalNumberOfBooks : "N/A")</p>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>ISBN</th>
                <th>Title</th>
                <th>Pages</th>
                <th>Published</th>
                <th>Chapters</th>
                <th>Status</th>
                <th>Author</th>
                <th>Price</th>
                <th>Weight</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.EntityId</td>
                    <td>@book.ISBN</td>
                    <td>@book.Title</td>
                    <td>@book.NumberOfPages</td>
                    <td>@book.PublishDate?.ToString("MM/yyyy")</td>
                    <td>@book.Editing?.NumberOfChapters</td>
                    <td>@book.Editing?.Status?.Value</td>
                    <td><a href='/books/@book.Editing?.mainAuthor?.Id'>@book.Editing?.mainAuthor?.Title</a></td>
                    <td>@book.Sales?.Price?.Value @book.Sales?.Price?.MonetaryUnit </td>
                    <td>@book.Sales?.WeightInGrams gr</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row">
        <div class="col">
            <PaginationBar 
                CurrentPage="CurrentPage"
                TotalPages="TotalPages"
                TotalCount="(int)TotalNumberOfBooks"
                PageSize="PageSize"
                Spread="2"
                SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    private int? TotalNumberOfBooks = null;
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 5;

    private Book[]? books;

    protected override async Task OnInitializedAsync()
    {
        TotalNumberOfBooks = await Http.GetFromJsonAsync<int>(@"http://localhost:5298/Books/$count");
        TotalPages = (int)Math.Ceiling((decimal)TotalNumberOfBooks / PageSize);

        books = await Http.GetFromJsonAsync<Book[]>(@"http://localhost:5298/Books?$top=" + PageSize);
    }

    protected async Task SelectedPage(int page)
    {
        TotalNumberOfBooks = await Http.GetFromJsonAsync<int>(@"http://localhost:5298/Books/$count");
        TotalPages = (int)Math.Ceiling((decimal)TotalNumberOfBooks / PageSize);

        CurrentPage = page;
        int top = PageSize;
        int skip = PageSize * (page - 1);
        books = await Http.GetFromJsonAsync<Book[]>(@"http://localhost:5298/Books?$top=" + top + "&$skip=" + skip);

        InvokeAsync(StateHasChanged);
    }

    public class Book
    {
        public string EntityId { get; set; }
        public string? ISBN { get; set; }
        public string? Title { get; set; }
        public int? NumberOfPages { get; set; }
        public DateTime? PublishDate { get; set; }
        public EditingPetal? Editing { get; set; }
        public SalesPetal Sales { get; set; }
    }
    
    public class EditingPetal
    {
        public int? NumberOfChapters { get; set; }
        public Status? Status { get; set; }
        public AuthorLink? mainAuthor { get; set; }
    }

    public class AuthorLink : Link
    {
        public string UserEmailAddress { get; set; }
        //public Author? FullEntity { get; set; }
    }

    public class Link
    {
        public string Rel { get; set; }
        public string Href { get; set; }
        public string Title { get; set; }
        public string Id
        {
            get
            {
                int pos = Href.LastIndexOf("/");
                return Href.Substring(pos + 1);
            }
        }
    }

    public class Status
    {
        public string Value { get; set; }
    }

    public class SalesPetal
    {
        public MonetaryAmount? Price { get; set; }
        public decimal? WeightInGrams { get; set; }
    }

    public class MonetaryAmount
    {
        public decimal Value { get; set; }
        public string MonetaryUnit { get; set; }
    }
}
